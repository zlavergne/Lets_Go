Paradigms & Principles of Go

* Imperative

- Go has loops, statements, selection statements, which control the operational order, so it fits into the Imperative paradigm.
* Concurrent Logic

- Go natively supports conncurency including multi-threading, multi-processing and asynchrony.
* Object Oriented

- Kind of. Go does allow types and methods and has OOP writing style it does not have any class hierarchy other than interfaces. 

* Writeability
Go was designed to be a "quiet" written language.

Why stutter through

    foo.Foo* myFoo = new foo.Foo()

when you can use := declare-and-initialize construct.

    myFoo := Foo()    

- No forward declarations.
- No header files.

* Orthogonality

- Methods can be implemented for any type.

- Structures represent data, interfaces represent abstraction.

- The interface interface{} is equivalent to void* in C or C++.

